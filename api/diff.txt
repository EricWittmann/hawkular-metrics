Only in api/metrics-api-jaxrs: README.adoc
Only in api/metrics-api-jaxrs-1.1: hawkular-metrics-api-jaxrs-1.1.iml
Only in api/metrics-api-jaxrs: hawkular-metrics-api-jaxrs.iml
diff -r '--exclude=target' api/metrics-api-jaxrs/pom.xml api/metrics-api-jaxrs-1.1/pom.xml
21c21
<   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
---
>          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
31c31
<   <artifactId>hawkular-metrics-api-jaxrs</artifactId>
---
>   <artifactId>hawkular-metrics-api-jaxrs-1.1</artifactId>
34,35c34,40
<   <name>Hawkular Metrics JAX-RS 2.0 API</name>
<   <description>JAX-RS 2.0 REST API Implementation</description>
---
>   <name>Hawkular Metrics JAX-RS 1.1 API</name>
>   <description>JAX-RS 1.1 REST API Implementation</description>
> 
>   <properties>
>     <enforcer.skip>true</enforcer.skip>
>     <container.bom.version>6.4.0.Beta1</container.bom.version>
>   </properties>
40,42c45,47
<         <groupId>org.wildfly.bom</groupId>
<         <artifactId>jboss-javaee-7.0-wildfly</artifactId>
<         <version>${version.org.wildfly}</version>
---
>         <groupId>org.jboss.bom.eap</groupId>
>         <artifactId>jboss-javaee-6.0-with-resteasy</artifactId>
>         <version>${container.bom.version}</version>
52,55d56
<       <groupId>org.antlr</groupId>
<       <artifactId>antlr4-runtime</artifactId>
<     </dependency>
<     <dependency>
66c67
<     <!-- Wildfly provided -->
---
>     <!-- AS7 provided -->
74c75
<       <artifactId>resteasy-jackson2-provider</artifactId>
---
>       <artifactId>resteasy-jackson-provider</artifactId>
79c80
<       <artifactId>jboss-servlet-api_3.1_spec</artifactId>
---
>       <artifactId>jboss-servlet-api_3.0_spec</artifactId>
99,110d99
< 
<     <!-- test -->
<     <dependency>
<       <groupId>junit</groupId>
<       <artifactId>junit</artifactId>
<       <scope>test</scope>
<     </dependency>
<     <dependency>
<       <groupId>org.mockito</groupId>
<       <artifactId>mockito-core</artifactId>
<       <scope>test</scope>
<     </dependency>
112a102,108
>   <repositories>
>     <repository>
>       <id>eap_6_early_access</id>
>       <url>https://maven.repository.redhat.com/earlyaccess/all/</url>
>     </repository>
>   </repositories>
> 
114c110
<     <finalName>hawkular-metric-rest</finalName>
---
>     <finalName>hawkular-metrics-api-rest-1.1</finalName>
116d111
< 
118,132c113,119
<         <groupId>org.antlr</groupId>
<         <artifactId>antlr4-maven-plugin</artifactId>
<         <executions>
<           <execution>
<             <id>antlr4</id>
<             <goals>
<               <goal>antlr4</goal>
<             </goals>
<             <phase>generate-sources</phase>
<             <configuration>
<               <listener>true</listener>
<               <visitor>true</visitor>
<             </configuration>
<           </execution>
<         </executions>
---
>         <groupId>org.jboss.as.plugins</groupId>
>         <artifactId>jboss-as-maven-plugin</artifactId>
>         <version>7.7.Final</version>
>         <configuration>
>           <version>7.5.0.Final-redhat-15</version>
>           <port>${jboss-as.management.port}</port>
>         </configuration>
152c139
<                 <exclude>static/index.html</exclude>
---
>                 <exclude>index.html</exclude>
160c147
<                 <include>static/index.html</include>
---
>                 <include>index.html</include>
170,230d156
<   <profiles>
<     <profile>
<       <id>docgen</id>
< 
<       <build>
<         <!-- Document generation from the Swagger annotations on the REST-API. -->
<         <plugins>
<           <plugin>
<             <groupId>org.apache.maven.plugins</groupId>
<             <artifactId>maven-dependency-plugin</artifactId>
<             <executions>
<               <execution>
<                 <id>unpack</id>
<                 <phase>process-resources</phase>
<                 <goals>
<                   <goal>unpack</goal>
<                 </goals>
<                 <configuration>
<                   <artifactItems>
<                     <artifactItem>
<                       <groupId>${project.groupId}</groupId>
<                       <artifactId>hawkular-build-tools</artifactId>
<                       <version>${version.org.hawkular.hawkular-build-tools}</version>
<                       <type>jar</type>
<                       <includes>**/*.mustache</includes>
<                     </artifactItem>
<                   </artifactItems>
<                 </configuration>
<               </execution>
<             </executions>
<           </plugin>
<           <plugin>
<             <groupId>com.github.kongchen</groupId>
<             <artifactId>swagger-maven-plugin</artifactId>
<             <configuration>
<               <apiSources>
<                 <apiSource>
<                   <locations>org.hawkular.metrics.api.jaxrs</locations>
<                   <apiVersion>1.0</apiVersion>
<                   <basePath>http://localhost:8080/hawkular/metrics/</basePath>
<                   <outputTemplate>${project.build.directory}/dependency/hawkular-documentation/asciidoc.mustache</outputTemplate>
<                   <swaggerDirectory>${project.build.directory}/generated/swagger-ui</swaggerDirectory>
<                   <swaggerInternalFilter>org.hawkular.metrics.api.jaxrs.swagger.filter.JaxRsFilter</swaggerInternalFilter>
<                   <swaggerApiReader>com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader</swaggerApiReader>
<                   <outputPath>${project.build.directory}/generated/rest-metrics.adoc</outputPath>
<                 </apiSource>
<               </apiSources>
<             </configuration>
<             <executions>
<               <execution>
<                 <phase>compile</phase>
<                 <goals>
<                   <goal>generate</goal>
<                 </goals>
<               </execution>
<             </executions>
<           </plugin>
<         </plugins>
<       </build>
<     </profile>
<   </profiles>
Only in api/metrics-api-jaxrs/src/main: antlr4
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/HawkularMetricsRestApp.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/HawkularMetricsRestApp.java
32,33d31
< import org.hawkular.metrics.api.jaxrs.filter.CorsRequestFilter;
< import org.hawkular.metrics.api.jaxrs.filter.CorsResponseFilter;
46d43
< import org.hawkular.metrics.api.jaxrs.influx.InfluxSeriesHandler;
48,49c45,47
< import org.hawkular.metrics.api.jaxrs.param.ConvertersProvider;
< import org.hawkular.metrics.api.jaxrs.util.JacksonConfig;
---
> import org.hawkular.metrics.api.jaxrs.param.DurationConverter;
> import org.hawkular.metrics.api.jaxrs.param.MetricTypeConverter;
> import org.hawkular.metrics.api.jaxrs.param.TagsConverter;
80d77
<         classes.add(InfluxSeriesHandler.class);
116,117d112
<         classes.add(CorsResponseFilter.class);
<         classes.add(CorsRequestFilter.class);
121,122c116,118
<         classes.add(ConvertersProvider.class);
<         classes.add(JacksonConfig.class);
---
>         classes.add(DurationConverter.class);
>         classes.add(MetricTypeConverter.class);
>         classes.add(TagsConverter.class);
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/MetricsServiceLifecycle.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/MetricsServiceLifecycle.java
363c363
< }
---
> }
\ No newline at end of file
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/config/ConfigurationKey.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/config/ConfigurationKey.java
37a38,39
> 
> 
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/ApplicationExceptionMapper.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/ApplicationExceptionMapper.java
21d20
< import javax.ws.rs.core.Response.Status;
37c36
<         return ExceptionMapperUtils.buildResponse(exception, Status.INTERNAL_SERVER_ERROR);
---
>         return ExceptionMapperUtils.buildResponse(exception, 500);
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/ExceptionMapperUtils.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/ExceptionMapperUtils.java
20a21
> import javax.ws.rs.core.Response.ResponseBuilder;
34a36,40
>     public static Response buildResponse(Throwable exception, int statusCode) {
>         ResponseBuilder responseBuilder = Response.status(statusCode);
>         return buildErrorResponse(exception, responseBuilder);
>     }
> 
36c42,47
<         Response response = Response.status(status)
---
>         ResponseBuilder responseBuilder = Response.status(status);
>         return buildErrorResponse(exception, responseBuilder);
>     }
> 
>     private static Response buildErrorResponse(Throwable exception, ResponseBuilder responseBuilder) {
>         Response response = responseBuilder
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotAcceptableExceptionMapper.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotAcceptableExceptionMapper.java
19d18
< import javax.ws.rs.NotAcceptableException;
22a22,23
> 
> import org.jboss.resteasy.spi.NotAcceptableException;
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotAllowedExceptionMapper.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotAllowedExceptionMapper.java
19d18
< import javax.ws.rs.NotAllowedException;
23a23,24
> import org.jboss.resteasy.spi.MethodNotAllowedException;
> 
33c34
< public class NotAllowedExceptionMapper implements ExceptionMapper<NotAllowedException> {
---
> public class NotAllowedExceptionMapper implements ExceptionMapper<MethodNotAllowedException> {
36,37c37,38
<     public Response toResponse(NotAllowedException exception) {
<         return ExceptionMapperUtils.buildResponse(exception, Response.Status.METHOD_NOT_ALLOWED);
---
>     public Response toResponse(MethodNotAllowedException exception) {
>         return ExceptionMapperUtils.buildResponse(exception, 405);
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotFoundExceptionMapper.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotFoundExceptionMapper.java
19d18
< import javax.ws.rs.NotFoundException;
22a22,23
> 
> import org.jboss.resteasy.spi.NotFoundException;
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotSupportedExceptionMapper.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/exception/mappers/NotSupportedExceptionMapper.java
16a17
> 
19d19
< import javax.ws.rs.NotSupportedException;
23a24,25
> import org.jboss.resteasy.spi.UnsupportedMediaTypeException;
> 
33c35
< public class NotSupportedExceptionMapper implements ExceptionMapper<NotSupportedException> {
---
> public class NotSupportedExceptionMapper implements ExceptionMapper<UnsupportedMediaTypeException> {
36c38
<     public Response toResponse(NotSupportedException exception) {
---
>     public Response toResponse(UnsupportedMediaTypeException exception) {
Only in api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/filter: CorsFilter.java
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/filter: CorsRequestFilter.java
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/filter: CorsResponseFilter.java
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/filter/EmptyPayloadFilter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/filter/EmptyPayloadFilter.java
20,21c20
< import java.io.IOException;
< 
---
> import javax.servlet.http.HttpServletRequest;
23,25c22,23
< import javax.ws.rs.container.ContainerRequestContext;
< import javax.ws.rs.container.ContainerRequestFilter;
< import javax.ws.rs.core.UriInfo;
---
> import javax.ws.rs.WebApplicationException;
> import javax.ws.rs.core.Context;
27a26,32
> import org.jboss.resteasy.annotations.interception.ServerInterceptor;
> import org.jboss.resteasy.core.ResourceMethod;
> import org.jboss.resteasy.core.ServerResponse;
> import org.jboss.resteasy.spi.Failure;
> import org.jboss.resteasy.spi.HttpRequest;
> import org.jboss.resteasy.spi.interception.PreProcessInterceptor;
> 
32a38
>  * @author Stefan Negrea
35c41,42
< public class EmptyPayloadFilter implements ContainerRequestFilter {
---
> @ServerInterceptor
> public class EmptyPayloadFilter implements PreProcessInterceptor {
37a45,47
>     @Context
>     HttpServletRequest servletRequest;
> 
39,48c49,54
<     public void filter(ContainerRequestContext requestContext) throws IOException {
<         if (!HttpMethod.POST.equals(requestContext.getMethod())) {
<             return;
<         }
<         UriInfo uriInfo = requestContext.getUriInfo();
<         String path = uriInfo.getPath();
<         if (path.startsWith("/db")) {
<             // Skip some endpoints:
<             // - Influx
<             return;
---
>     public ServerResponse preProcess(HttpRequest request,
>             ResourceMethod resourceMethod) throws Failure,
>             WebApplicationException {
> 
>         if (!HttpMethod.POST.equals(request.getHttpMethod())) {
>             return null;
50c56,58
<         requestContext.setProperty(EMPTY_PAYLOAD, Boolean.TRUE);
---
> 
>         servletRequest.setAttribute(EMPTY_PAYLOAD, Boolean.TRUE);
>         return null;
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/filter/MetricsServiceStateFilter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/filter/MetricsServiceStateFilter.java
21,22d20
< import java.io.IOException;
< 
24,25c22
< import javax.ws.rs.container.ContainerRequestContext;
< import javax.ws.rs.container.ContainerRequestFilter;
---
> import javax.ws.rs.WebApplicationException;
28d24
< import javax.ws.rs.core.UriInfo;
34a31,36
> import org.jboss.resteasy.annotations.interception.ServerInterceptor;
> import org.jboss.resteasy.core.ResourceMethod;
> import org.jboss.resteasy.core.ServerResponse;
> import org.jboss.resteasy.spi.Failure;
> import org.jboss.resteasy.spi.HttpRequest;
> import org.jboss.resteasy.spi.interception.PreProcessInterceptor;
40c42,43
< public class MetricsServiceStateFilter implements ContainerRequestFilter {
---
> @ServerInterceptor
> public class MetricsServiceStateFilter implements PreProcessInterceptor {
50,52c53,55
<     public void filter(ContainerRequestContext containerRequestContext) throws IOException {
<         UriInfo uriInfo = containerRequestContext.getUriInfo();
<         String path = uriInfo.getPath();
---
>     public ServerResponse preProcess(HttpRequest request, ResourceMethod method) throws Failure,
>             WebApplicationException {
>         String path = request.getUri().getPath();
56c59
<             return;
---
>             return null;
65c68
<             containerRequestContext.abortWith(response);
---
>             return ServerResponse.copyIfNotServerResponse(response);
72c75
<             containerRequestContext.abortWith(response);
---
>             return ServerResponse.copyIfNotServerResponse(response);
74c77
<                    metricsServiceLifecycle.getState() == State.STOPPING) {
---
>                 metricsServiceLifecycle.getState() == State.STOPPING) {
79c82
<             containerRequestContext.abortWith(response);
---
>             return ServerResponse.copyIfNotServerResponse(response);
80a84,85
> 
>         return null;
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/filter/TenantFilter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/filter/TenantFilter.java
21c21
< import java.io.IOException;
---
> import java.util.List;
23,24c23
< import javax.ws.rs.container.ContainerRequestContext;
< import javax.ws.rs.container.ContainerRequestFilter;
---
> import javax.ws.rs.WebApplicationException;
27d25
< import javax.ws.rs.core.UriInfo;
33a32,37
> import org.jboss.resteasy.annotations.interception.ServerInterceptor;
> import org.jboss.resteasy.core.ResourceMethod;
> import org.jboss.resteasy.core.ServerResponse;
> import org.jboss.resteasy.spi.Failure;
> import org.jboss.resteasy.spi.HttpRequest;
> import org.jboss.resteasy.spi.interception.PreProcessInterceptor;
39c43,44
< public class TenantFilter implements ContainerRequestFilter {
---
> @ServerInterceptor
> public class TenantFilter implements PreProcessInterceptor {
51,53c56,58
<     public void filter(ContainerRequestContext requestContext) throws IOException {
<         UriInfo uriInfo = requestContext.getUriInfo();
<         String path = uriInfo.getPath();
---
>     public ServerResponse preProcess(HttpRequest request, ResourceMethod method) throws Failure,
>             WebApplicationException {
>         String path = request.getUri().getPath();
56c61,63
<             || path.equals(BaseHandler.PATH) || path.startsWith(VirtualClockHandler.PATH)) {
---
>                 //On older version, the path value from localhost:8080/hawkular/metrics is an empty String instead of /
>                 || path.equals(BaseHandler.PATH) || path.equals("")
>                 || path.startsWith(VirtualClockHandler.PATH)) {
58c65
<             return;
---
>             return null;
61c68,69
<         String tenant = requestContext.getHeaders().getFirst(TENANT_HEADER_NAME);
---
>         List<String> requestHeader = request.getHttpHeaders().getRequestHeader(TENANT_HEADER_NAME);
>         String tenant = requestHeader != null && !requestHeader.isEmpty() ? requestHeader.get(0) : null;
64c72
<             return;
---
>             return null;
69,72c77,80
<                                     .type(APPLICATION_JSON_TYPE)
<                                     .entity(new ApiError(MISSING_TENANT_MSG))
<                                     .build();
<         requestContext.abortWith(response);
---
>                 .type(APPLICATION_JSON_TYPE)
>                 .entity(new ApiError(MISSING_TENANT_MSG))
>                 .build();
>         return ServerResponse.copyIfNotServerResponse(response);
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/AvailabilityHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/AvailabilityHandler.java
28d27
< import static org.hawkular.metrics.api.jaxrs.util.ApiUtils.valueToResponse;
33a33
> import java.util.Optional;
47,48d46
< import javax.ws.rs.container.AsyncResponse;
< import javax.ws.rs.container.Suspended;
54,55d51
< import org.hawkular.metrics.api.jaxrs.handler.observer.MetricCreatedObserver;
< import org.hawkular.metrics.api.jaxrs.handler.observer.ResultSetObserver;
65a62
> import org.hawkular.metrics.core.api.MetricAlreadyExistsException;
110,111c107
<     public void createAvailabilityMetric(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response createAvailabilityMetric(
116,117c112,113
<             asyncResponse.resume(badRequest(new ApiError("MetricDefinition type does not match " + MetricType
<                     .AVAILABILITY.getText())));
---
>             return ApiUtils.badRequest(new ApiError("MetricDefinition type does not match " + MetricType
>                     .AVAILABILITY.getText()));
122c118,127
<         metricsService.createMetric(metric).subscribe(new MetricCreatedObserver(asyncResponse, location));
---
>         try {
>             Observable<Void> observable = metricsService.createMetric(metric);
>             observable.toBlocking().lastOrDefault(null);
>             return Response.created(location).build();
>         } catch (MetricAlreadyExistsException e) {
>             String message = "A metric with name [" + e.getMetric().getId().getName() + "] already exists";
>             return Response.status(Response.Status.CONFLICT).entity(new ApiError(message)).build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
133,135c138,140
<     public void getAvailabilityMetric(@Suspended final AsyncResponse asyncResponse, @PathParam("id") String id) {
< 
<         metricsService.findMetric(new MetricId<>(tenantId, AVAILABILITY, id))
---
>     public Response getAvailabilityMetric(@PathParam("id") String id) {
>         try {
>             return metricsService.findMetric(new MetricId<>(tenantId, AVAILABILITY, id))
139c144,148
<                 .subscribe(asyncResponse::resume, t -> asyncResponse.resume(serverError(t)));
---
>                 .toBlocking()
>                 .firstOrDefault(null);
>         } catch (Exception e) {
>             return serverError(e);
>         }
151,152c160
<     public void getAvailabilityMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response getAvailabilityMetricTags(
155,157c163,172
<         metricsService.getMetricTags(new MetricId<>(tenantId, AVAILABILITY, id)).subscribe(
<                 optional -> asyncResponse.resume(valueToResponse(optional)),
<                 t -> asyncResponse.resume(serverError(t)));
---
>         Observable<Optional<Map<String, String>>> something = metricsService
>                 .getMetricTags(new MetricId<>(tenantId, AVAILABILITY, id));
>         try {
>             return something
>                     .map(ApiUtils::valueToResponse)
>                     .toBlocking()
>                     .lastOrDefault(null);
>         } catch (Exception e) {
>             return serverError(e);
>         }
159a175
> 
167,168c183
<     public void updateAvailabilityMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response updateAvailabilityMetricTags(
173c188,193
<         metricsService.addTags(metric, tags).subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addTags(metric, tags).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
184,185c204
<     public void deleteAvailabilityMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response deleteAvailabilityMetricTags(
190c209,215
<         metricsService.deleteTags(metric, tags.getTags()).subscribe(new ResultSetObserver(asyncResponse));
---
> 
>         try {
>             metricsService.deleteTags(metric, tags.getTags()).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
202,203c227,228
<     public void addAvailabilityForMetric(
<             @Suspended final AsyncResponse asyncResponse, @PathParam("id") String id,
---
>     public Response addAvailabilityForMetric(
>             @PathParam("id") String id,
207,208c232,237
<         Observable<Void> observable = metricsService.addDataPoints(AVAILABILITY, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(AVAILABILITY, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
220,221c249
<     public void addAvailabilityData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response addAvailabilityData(
226,227c254,259
<         Observable<Void> observable = metricsService.addDataPoints(AVAILABILITY, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(AVAILABILITY, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
238,239c270
<     public void findAvailabilityDataByTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response findAvailabilityDataByTags(
243c274
<             asyncResponse.resume(badRequest(new ApiError("Missing tags query")));
---
>             return badRequest(new ApiError("Missing tags query"));
245,253c276,288
<             // @TODO Repeated code, refactor (in GaugeHandler also)
<             metricsService.findAvailabilityByTags(tenantId, tags.getTags()).subscribe(m -> {
<                 if (m.isEmpty()) {
<                     asyncResponse.resume(Response.noContent().build());
<                 } else {
<                     asyncResponse.resume(Response.ok(m).build());
<                 }
<             }, t -> asyncResponse.resume(Response.serverError().entity(new ApiError(t.getMessage())).build()));
< 
---
>             try {
>                 return metricsService.findAvailabilityByTags(tenantId, tags.getTags()).map(m -> {
>                     if (m.isEmpty()) {
>                         return ApiUtils.noContent();
>                     } else {
>                         return Response.ok(m).build();
>                     }
>                 })
>                         .toBlocking()
>                         .lastOrDefault(null);
>             } catch (Exception e) {
>                 return Response.serverError().entity(new ApiError(e.getMessage())).build();
>             }
269,270c304
<     public void findAvailabilityData(
<             @Suspended AsyncResponse asyncResponse,
---
>     public Response findAvailabilityData(
278a313
> 
284d318
< 
286c320,321
<             metricsService.findAvailabilityData(metricId, startTime, endTime, distinct)
---
>             try {
>                 return metricsService.findAvailabilityData(metricId, startTime, endTime, distinct)
290,295c325,330
<                     .subscribe(
<                             asyncResponse::resume,
<                             t -> {
<                                 logger.warn("Failed to fetch availability data", t);
<                                 serverError(t);
<                             });
---
>                     .toBlocking()
>                     .lastOrDefault(null);
>             } catch (Exception e) {
>                 logger.warn("Failed to fetch availability data", e);
>                 return serverError(e);
>             }
297c332
<             asyncResponse.resume(badRequest(new ApiError("Both buckets and bucketDuration parameters are used")));
---
>             return badRequest(new ApiError("Both buckets and bucketDuration parameters are used"));
307,308c342,349
<                 asyncResponse.resume(badRequest(new ApiError("Bucket: " + e.getMessage())));
<                 return;
---
>                 return badRequest(new ApiError("Bucket: " + e.getMessage()));
>             }
>             try {
>                 return metricsService.findAvailabilityStats(metricId, startTime, endTime, buckets)
>                         .map(ApiUtils::collectionToResponse).toBlocking()
>                         .lastOrDefault(null);
>             } catch (Exception e) {
>                 return serverError(e);
310,313d350
< 
<             metricsService.findAvailabilityStats(metricId, startTime, endTime, buckets)
<                 .map(ApiUtils::collectionToResponse)
<                 .subscribe(asyncResponse::resume, ApiUtils::serverError);
324,325c361
<     public void tagAvailabilityData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response tagAvailabilityData(
337c373,379
<         resultSetObservable.subscribe(new ResultSetObserver(asyncResponse));
---
> 
>         try {
>             resultSetObservable.toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
348,349c390
<     public void findTaggedAvailabilityData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response findTaggedAvailabilityData(
352,353c393,394
<         metricsService.findAvailabilityByTags(tenantId, tags.getTags())
<         .subscribe(m -> { // @TODO Repeated code, refactor and use Optional?
---
>         try {
>         return metricsService.findAvailabilityByTags(tenantId, tags.getTags()).map(m -> {
355c396
<                 asyncResponse.resume(Response.noContent().build());
---
>                 return ApiUtils.noContent();
357c398
<                 asyncResponse.resume(Response.ok(m).build());
---
>                 return Response.ok(m).build();
359c400,403
<         }, t -> asyncResponse.resume(Response.serverError().entity(new ApiError(t.getMessage())).build()));
---
>             }).toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return Response.serverError().entity(new ApiError(e.getMessage())).build();
>         }
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/CounterHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/CounterHandler.java
42,43d41
< import javax.ws.rs.container.AsyncResponse;
< import javax.ws.rs.container.Suspended;
49,50d46
< import org.hawkular.metrics.api.jaxrs.handler.observer.MetricCreatedObserver;
< import org.hawkular.metrics.api.jaxrs.handler.observer.ResultSetObserver;
56a53
> import org.hawkular.metrics.core.api.MetricAlreadyExistsException;
107,108c104
<     public void createCounter(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response createCounter(
113,114c109,110
<             asyncResponse.resume(badRequest(new ApiError("MetricDefinition type does not match " + MetricType
<                     .COUNTER.getText())));
---
>             return badRequest(new ApiError("MetricDefinition type does not match " + MetricType
>                     .COUNTER.getText()));
119c115,124
<         metricsService.createMetric(metric).subscribe(new MetricCreatedObserver(asyncResponse, location));
---
>         try {
>             Observable<Void> observable = metricsService.createMetric(metric);
>             observable.toBlocking().lastOrDefault(null);
>             return Response.created(location).build();
>         } catch (MetricAlreadyExistsException e) {
>             String message = "A metric with name [" + e.getMetric().getId().getName() + "] already exists";
>             return Response.status(Response.Status.CONFLICT).entity(new ApiError(message)).build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
130,132c135,137
<     public void getCounter(@Suspended final AsyncResponse asyncResponse, @PathParam("id") String id) {
< 
<         metricsService.findMetric(new MetricId<>(tenantId, COUNTER, id))
---
>     public Response getCounter(@PathParam("id") String id) {
>         try {
>             return metricsService.findMetric(new MetricId<>(tenantId, COUNTER, id))
135,136c140,144
<                 .switchIfEmpty(Observable.just(noContent()))
<                 .subscribe(asyncResponse::resume, t -> asyncResponse.resume(serverError(t)));
---
>                     .switchIfEmpty(Observable.just(noContent()))
>                 .toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return serverError(e);
>         }
148,149c156
<     public void addData(@Suspended final AsyncResponse asyncResponse,
<                         @ApiParam(value = "List of metrics", required = true) List<Counter> counters
---
>     public Response addData(@ApiParam(value = "List of metrics", required = true) List<Counter> counters
152,153c159,164
<         Observable<Void> observable = metricsService.addDataPoints(COUNTER, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(COUNTER, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
165,166c176
<     public void addData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response addData(
172,173c182,187
<         Observable<Void> observable = metricsService.addDataPoints(COUNTER, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(COUNTER, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
186,187c200
<     public void findCounterData(
<             @Suspended AsyncResponse asyncResponse,
---
>     public Response findCounterData(
196c209,210
<         metricsService.findDataPoints(new MetricId<>(tenantId, COUNTER, id), startTime, endTime)
---
>         try {
>             return metricsService.findDataPoints(new MetricId<>(tenantId, COUNTER, id), startTime, endTime)
200,205c214,219
<                 .subscribe(
<                         asyncResponse::resume,
<                         t -> {
<                             logger.warn("Failed to fetch counter data", t);
<                             serverError(t);
<                         });
---
>                 .toBlocking()
>                 .lastOrDefault(null);
>         } catch (Exception e) {
>             logger.warn("Failed to fetch counter data", e);
>             return serverError(e);
>         }
221,222c235
<     public void findRate(
<         @Suspended AsyncResponse asyncResponse,
---
>     public Response findRate(
231c244,245
<         metricsService.findRateData(new MetricId<>(tenantId, COUNTER, id), startTime, endTime)
---
>         try  {
>             return metricsService.findRateData(new MetricId<>(tenantId, COUNTER, id), startTime, endTime)
235,240c249,254
<                 .subscribe(
<                         asyncResponse::resume,
<                         t -> {
<                             logger.warn("Failed to fetch counter rate data", t);
<                             serverError(t);
<                         });
---
>                 .toBlocking()
>                 .lastOrDefault(null);
>         } catch (Exception e) {
>             logger.warn("Failed to fetch counter rate data", e);
>             return serverError(e);
>         }
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/GaugeHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/GaugeHandler.java
44,45d43
< import javax.ws.rs.container.AsyncResponse;
< import javax.ws.rs.container.Suspended;
51,52d48
< import org.hawkular.metrics.api.jaxrs.handler.observer.MetricCreatedObserver;
< import org.hawkular.metrics.api.jaxrs.handler.observer.ResultSetObserver;
61a58
> import org.hawkular.metrics.core.api.MetricAlreadyExistsException;
91a89
>     @Produces(APPLICATION_JSON)
104,105c102
<     public void createGaugeMetric(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response createGaugeMetric(
110,111c107,108
<             asyncResponse.resume(badRequest(new ApiError("MetricDefinition type does not match " + MetricType
<                     .GAUGE.getText())));
---
>             return ApiUtils.badRequest(new ApiError("MetricDefinition type does not match " + MetricType
>                     .GAUGE.getText()));
116c113,122
<         metricsService.createMetric(metric).subscribe(new MetricCreatedObserver(asyncResponse, location));
---
>         try {
>             Observable<Void> observable = metricsService.createMetric(metric);
>             observable.toBlocking().lastOrDefault(null);
>             return Response.created(location).build();
>         } catch (MetricAlreadyExistsException e) {
>             String message = "A metric with name [" + e.getMetric().getId().getName() + "] already exists";
>             return Response.status(Response.Status.CONFLICT).entity(new ApiError(message)).build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
119a126
>     @Produces(APPLICATION_JSON)
127,128c134,136
<     public void getGaugeMetric(@Suspended final AsyncResponse asyncResponse, @PathParam("id") String id) {
<         metricsService.findMetric(new MetricId<>(tenantId, GAUGE, id))
---
>     public Response getGaugeMetric(@PathParam("id") String id) {
>         try {
>             return metricsService.findMetric(new MetricId<>(tenantId, GAUGE, id))
131,132c139,142
<                 .switchIfEmpty(Observable.just(ApiUtils.noContent()))
<                 .subscribe(asyncResponse::resume, t -> asyncResponse.resume(ApiUtils.serverError(t)));
---
>                 .switchIfEmpty(Observable.just(ApiUtils.noContent())).toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
135a146
>     @Produces(APPLICATION_JSON)
144,152c155,162
<     public void getGaugeMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
<             @PathParam("id") String id
<     ) {
<         metricsService.getMetricTags(new MetricId<>(tenantId, GAUGE, id))
<                 .subscribe(
<                         optional -> asyncResponse.resume(ApiUtils.valueToResponse(optional)),
<                         t ->asyncResponse.resume(ApiUtils.serverError(t))
<                 );
---
>     public Response getGaugeMetricTags(@PathParam("id") String id) {
>         try {
>             return metricsService.getMetricTags(new MetricId<>(tenantId, GAUGE, id))
>                     .map(ApiUtils::valueToResponse)
>                     .toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
155a166
>     @Produces(APPLICATION_JSON)
162,163c173
<     public void updateGaugeMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response updateGaugeMetricTags(
168c178,183
<         metricsService.addTags(metric, tags).subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addTags(metric, tags).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
171a187
>     @Produces(APPLICATION_JSON)
179,180c195
<     public void deleteGaugeMetricTags(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response deleteGaugeMetricTags(
184,185c199,205
<         Metric<Double> metric = new Metric<>(new MetricId<>(tenantId, GAUGE, id));
<         metricsService.deleteTags(metric, tags.getTags()).subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             Metric<Double> metric = new Metric<>(new MetricId<>(tenantId, GAUGE, id));
>             metricsService.deleteTags(metric, tags.getTags()).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
188a209
>     @Produces(APPLICATION_JSON)
197,198c218
<     public void addDataForMetric(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response addDataForMetric(
204,205c224,229
<         Observable<Void> observable = metricsService.addDataPoints(GAUGE, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(GAUGE, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
208a233
>     @Produces(APPLICATION_JSON)
217,218c242
<     public void addGaugeData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response addGaugeData(
222,223c246,251
<         Observable<Void> observable = metricsService.addDataPoints(GAUGE, metrics);
<         observable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             metricsService.addDataPoints(GAUGE, metrics).toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
226a255
>     @Produces(APPLICATION_JSON)
233,236c262
<     public void findGaugeDataByTags(
<             @Suspended final AsyncResponse asyncResponse,
<             @ApiParam(value = "Tag list", required = true) @QueryParam("tags") Tags tags
<     ) {
---
>     public Response findGaugeDataByTags(@ApiParam(value = "Tag list", required = true) @QueryParam("tags") Tags tags) {
238c264
<             asyncResponse.resume(badRequest(new ApiError("Missing tags query")));
---
>             return badRequest(new ApiError("Missing tags query"));
240,246c266,276
<             metricsService.findGaugeDataByTags(tenantId, tags.getTags()).subscribe(m -> {
<                 if (m.isEmpty()) {
<                     asyncResponse.resume(Response.noContent().build());
<                 } else {
<                     asyncResponse.resume(Response.ok(m).build());
<                 }
<             }, t -> asyncResponse.resume(Response.serverError().entity(new ApiError(t.getMessage())).build()));
---
>             try{
>                 return metricsService.findGaugeDataByTags(tenantId, tags.getTags()).map(m -> {
>                     if (m.isEmpty()) {
>                         return ApiUtils.noContent();
>                     } else {
>                         return Response.ok(m).build();
>                     }
>                 }).toBlocking().lastOrDefault(null);
>             } catch (Exception e) {
>                 return Response.serverError().entity(new ApiError(e.getMessage())).build();
>             }
251a282
>     @Produces(APPLICATION_JSON)
262,263c293
<     public void findGaugeData(
<             @Suspended AsyncResponse asyncResponse,
---
>     public Response findGaugeData(
277,281c307,317
<             metricsService.findDataPoints(metricId, startTime, endTime)
<                     .map(GaugeDataPoint::new)
<                     .toList()
<                     .map(ApiUtils::collectionToResponse)
<                     .subscribe(asyncResponse::resume, t -> asyncResponse.resume(ApiUtils.serverError(t)));
---
>             try {
>                 return metricsService
>                         .findDataPoints(metricId, startTime, endTime)
>                         .map(GaugeDataPoint::new)
>                         .toList()
>                         .map(ApiUtils::collectionToResponse)
>                         .toBlocking()
>                         .lastOrDefault(null);
>             } catch (Exception e) {
>                 return ApiUtils.serverError(e);
>             }
283c319
<             asyncResponse.resume(badRequest(new ApiError("Both buckets and bucketDuration parameters are used")));
---
>             return badRequest(new ApiError("Both buckets and bucketDuration parameters are used"));
293,294c329
<                 asyncResponse.resume(badRequest(new ApiError("Bucket: " + e.getMessage())));
<                 return;
---
>                 return badRequest(new ApiError("Bucket: " + e.getMessage()));
297,299c332,340
<             metricsService.findGaugeStats(metricId, startTime, endTime, buckets)
<                     .map(ApiUtils::collectionToResponse)
<                     .subscribe(asyncResponse::resume, t -> asyncResponse.resume(ApiUtils.serverError(t)));
---
>             try {
>                 return metricsService
>                         .findGaugeStats(metricId, startTime, endTime, buckets)
>                         .map(ApiUtils::collectionToResponse)
>                         .toBlocking()
>                         .lastOrDefault(null);
>             } catch (Exception e) {
>                 return ApiUtils.serverError(e);
>             }
303a345
>     @Produces(APPLICATION_JSON)
310,311c352
<     public void findPeriods(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response findPeriods(
357,362c398,399
<             asyncResponse.resume(badRequest(
<                     new ApiError(
<                             "Invalid value for op parameter. Supported values are lt, "
<                                     + "lte, eq, gt, gte."
<                     )
<             ));
---
>             return badRequest(
>                     new ApiError("Invalid value for op parameter. Supported values are lt, lte, eq, gt, gte."));
364,366c401,406
<             metricsService.getPeriods(new MetricId<>(tenantId, GAUGE, id), predicate, startTime, endTime)
<                     .map(ApiUtils::collectionToResponse)
<                     .subscribe(asyncResponse::resume, t -> asyncResponse.resume(ApiUtils.serverError(t)));
---
>             try {
>                 return metricsService.getPeriods(new MetricId<>(tenantId, GAUGE, id), predicate, startTime, endTime)
>                         .map(ApiUtils::collectionToResponse).toBlocking().lastOrDefault(null);
>             } catch (Exception e) {
>                 return ApiUtils.serverError(e);
>             }
370a411
>     @Produces(APPLICATION_JSON)
377,390c418,432
<     public void findTaggedGaugeData(
<             @Suspended final AsyncResponse asyncResponse,
<             @ApiParam("Tag list") @PathParam("tags") Tags tags
<     ) {
<         metricsService.findGaugeDataByTags(tenantId, tags.getTags())
<                 .flatMap(input -> Observable.from(input.entrySet()))
<                 .toMap(e -> e.getKey().getName(), Map.Entry::getValue)
<                 .subscribe(m -> { // @TODO Repeated code
<                     if (m.isEmpty()) {
<                         asyncResponse.resume(Response.noContent().build());
<                     } else {
<                         asyncResponse.resume(Response.ok(m).build());
<                     }
<                 }, t -> asyncResponse.resume(ApiUtils.serverError(t)));
---
>     public Response findTaggedGaugeData(@ApiParam("Tag list") @PathParam("tags") Tags tags) {
>         try {
>             return metricsService.findGaugeDataByTags(tenantId, tags.getTags())
>                     .flatMap(input -> Observable.from(input.entrySet()))
>                     .toMap(e -> e.getKey().getName(), Map.Entry::getValue)
>                     .map(m -> {
>                         if (m.isEmpty()) {
>                         return ApiUtils.noContent();
>                         } else {
>                             return Response.ok(m).build();
>                         }
>                     }).toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
393a436
>     @Produces(APPLICATION_JSON)
401,404c444
<     public void tagGaugeData(
<             @Suspended final AsyncResponse asyncResponse,
<             @PathParam("id") final String id, @ApiParam(required = true) TagRequest params
<     ) {
---
>     public Response tagGaugeData(@PathParam("id") final String id, @ApiParam(required = true) TagRequest params) {
413c453,458
<         resultSetObservable.subscribe(new ResultSetObserver(asyncResponse));
---
>         try {
>             resultSetObservable.toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/MetricHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/MetricHandler.java
41,42d40
< import javax.ws.rs.container.AsyncResponse;
< import javax.ws.rs.container.Suspended;
48d45
< import org.hawkular.metrics.api.jaxrs.handler.observer.MetricCreatedObserver;
58a56
> import org.hawkular.metrics.core.api.MetricAlreadyExistsException;
71d68
< 
81a79
> 
101,102c99
<     public void createMetric(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response createMetric(
107c104
<             asyncResponse.resume(badRequest(new ApiError("MetricDefinition type is invalid")));
---
>             return badRequest(new ApiError("MetricDefinition type is invalid"));
113c110,120
<         metricsService.createMetric(metric).subscribe(new MetricCreatedObserver(asyncResponse, location));
---
> 
>         try {
>             Observable<Void> observable = metricsService.createMetric(metric);
>             observable.toBlocking().lastOrDefault(null);
>             return Response.created(location).build();
>         } catch (MetricAlreadyExistsException e) {
>             String message = "A metric with name [" + e.getMetric().getId().getName() + "] already exists";
>             return Response.status(Response.Status.CONFLICT).entity(new ApiError(message)).build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
115a123,124
> 
>     @SuppressWarnings("rawtypes")
127,128c136
<     public <T> void findMetrics(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public <T> Response findMetrics(
136,137c144
<             asyncResponse.resume(badRequest(new ApiError("Incorrect type param " + metricType.toString())));
<             return;
---
>             return badRequest(new ApiError("Incorrect type param " + metricType.toString()));
144,154c151,162
<         metricObservable
<                 .map(MetricDefinition::new)
<                 .toList()
<                 .map(ApiUtils::collectionToResponse)
<                 .subscribe(asyncResponse::resume, t -> {
<                     if (t instanceof PatternSyntaxException) {
<                         asyncResponse.resume(badRequest(t));
<                     } else {
<                         asyncResponse.resume(serverError(t));
<                     }
<                 });
---
>         try {
>             return metricObservable
>                     .map(MetricDefinition::new)
>                     .toList()
>                     .map(ApiUtils::collectionToResponse)
>                     .toBlocking()
>                     .lastOrDefault(null);
>         } catch (PatternSyntaxException e) {
>             return badRequest(e);
>         } catch (Exception e) {
>             return serverError(e);
>         }
166,167c174
<     public void addMetricsData(
<             @Suspended final AsyncResponse asyncResponse,
---
>     public Response addMetricsData(
171,172c178
<             asyncResponse.resume(emptyPayload());
<             return;
---
>             return emptyPayload();
180,188c186,194
<         metricsService.addDataPoints(GAUGE, gauges)
<                 .mergeWith(metricsService.addDataPoints(AVAILABILITY, availabilities))
<                 .mergeWith(metricsService.addDataPoints(COUNTER, counters))
<                 .subscribe(
<                         aVoid -> {
<                         },
<                         t -> asyncResponse.resume(serverError(t)),
<                         () -> asyncResponse.resume(Response.ok().build())
<                 );
---
>         try {
>             metricsService.addDataPoints(GAUGE, gauges)
>                     .mergeWith(metricsService.addDataPoints(AVAILABILITY, availabilities))
>                     .mergeWith(metricsService.addDataPoints(COUNTER, counters))
>                     .toBlocking().lastOrDefault(null);
>             return Response.ok().build();
>         } catch (Exception e) {
>             return serverError(e);
>         }
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/StatusHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/StatusHandler.java
66,67d65
< 
< 
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler/TenantsHandler.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/handler/TenantsHandler.java
21,23d20
< import static org.hawkular.metrics.api.jaxrs.util.ApiUtils.collectionToResponse;
< import static org.hawkular.metrics.api.jaxrs.util.ApiUtils.serverError;
< 
32,33d28
< import javax.ws.rs.container.AsyncResponse;
< import javax.ws.rs.container.Suspended;
34a30
> import javax.ws.rs.core.Response;
38d33
< import org.hawkular.metrics.api.jaxrs.handler.observer.TenantCreatedObserver;
39a35
> import org.hawkular.metrics.api.jaxrs.util.ApiUtils;
40a37
> import org.hawkular.metrics.core.api.TenantAlreadyExistsException;
57,58d53
<     // TODO: add back retention settings
< 
75,76c70
<     public void createTenant(
<             @Suspended AsyncResponse asyncResponse,
---
>     public Response createTenant(
81,82c75,84
<         metricsService.createTenant(tenantDefinition.toTenant())
<                 .subscribe(new TenantCreatedObserver(asyncResponse, location));
---
>         try {
>             metricsService.createTenant(tenantDefinition.toTenant())
>                     .toBlocking().lastOrDefault(null);
>             return Response.created(location).build();
>         } catch (TenantAlreadyExistsException e) {
>             String message = "A tenant with id [" + e.getTenantId() + "] already exists";
>             return Response.status(Response.Status.CONFLICT).entity(new ApiError(message)).build();
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
93,97c95,101
<     public void findTenants(@Suspended AsyncResponse asyncResponse) {
<         metricsService.getTenants().map(TenantDefinition::new).toList().subscribe(
<                 tenants -> asyncResponse.resume(collectionToResponse(tenants)),
<                 error -> asyncResponse.resume(serverError(error))
<         );
---
>     public Response findTenants() {
>         try {
>             return metricsService.getTenants().map(TenantDefinition::new).toList()
>                     .map(ApiUtils::collectionToResponse).toBlocking().lastOrDefault(null);
>         } catch (Exception e) {
>             return ApiUtils.serverError(e);
>         }
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/handler: observer
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs: influx
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/interceptor/EmptyPayloadInterceptor.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/interceptor/EmptyPayloadInterceptor.java
30,31c30,33
< import javax.ws.rs.ext.ReaderInterceptor;
< import javax.ws.rs.ext.ReaderInterceptorContext;
---
> 
> import org.jboss.resteasy.annotations.interception.ServerInterceptor;
> import org.jboss.resteasy.spi.interception.MessageBodyReaderContext;
> import org.jboss.resteasy.spi.interception.MessageBodyReaderInterceptor;
37a40
>  * @author Stefan Negrea
41c44,45
< public class EmptyPayloadInterceptor implements ReaderInterceptor {
---
> @ServerInterceptor
> public class EmptyPayloadInterceptor implements MessageBodyReaderInterceptor {
44c48
<     public Object aroundReadFrom(ReaderInterceptorContext context) throws IOException, WebApplicationException {
---
>     public Object read(MessageBodyReaderContext context) throws IOException, WebApplicationException {
46c50
<         if (context.getProperty(EMPTY_PAYLOAD) != TRUE) {
---
>         if (context.getAttribute(EMPTY_PAYLOAD) != TRUE) {
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/param: ConvertersProvider.java
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/param/DurationConverter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/param/DurationConverter.java
27c27,29
< import javax.ws.rs.ext.ParamConverter;
---
> import javax.ws.rs.ext.Provider;
> 
> import org.jboss.resteasy.spi.StringConverter;
36c38,39
< public class DurationConverter implements ParamConverter<Duration> {
---
> @Provider
> public class DurationConverter implements StringConverter<Duration> {
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/param/MetricTypeConverter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/param/MetricTypeConverter.java
16a17
> 
19c20
< import javax.ws.rs.ext.ParamConverter;
---
> import javax.ws.rs.ext.Provider;
21a23
> import org.jboss.resteasy.spi.StringConverter;
28c30,31
< public class MetricTypeConverter implements ParamConverter<MetricType<?>> {
---
> @Provider
> public class MetricTypeConverter implements StringConverter<MetricType<?>> {
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/param/TagsConverter.java api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/param/TagsConverter.java
28c28,30
< import javax.ws.rs.ext.ParamConverter;
---
> import javax.ws.rs.ext.Provider;
> 
> import org.jboss.resteasy.spi.StringConverter;
36c38,39
< public class TagsConverter implements ParamConverter<Tags> {
---
> @Provider
> public class TagsConverter implements StringConverter<Tags> {
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs: swagger
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/util: JacksonConfig.java
Only in api/metrics-api-jaxrs-1.1/src/main/java/org/hawkular/metrics/api/jaxrs/util: JacksonContextResolver.java
Only in api/metrics-api-jaxrs/src/main/java/org/hawkular/metrics/api/jaxrs/util: SimpleLink.java
Only in api/metrics-api-jaxrs/src/main/resources: rest-doc
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/webapp/WEB-INF/jboss-deployment-structure.xml api/metrics-api-jaxrs-1.1/src/main/webapp/WEB-INF/jboss-deployment-structure.xml
22,25d21
<     <exclusions>
<       <module name="org.jboss.resteasy.resteasy-jackson-provider"/>
<       <module name="org.jboss.resteasy.resteasy-jettison-provider"/>
<     </exclusions>
27c23,24
<       <module name="org.jboss.resteasy.resteasy-jackson2-provider" services="import"/>
---
>       <module name="org.codehaus.jackson.jackson-core-asl" />
>       <module name="org.codehaus.jackson.jackson-mapper-asl" />
diff -r '--exclude=target' api/metrics-api-jaxrs/src/main/webapp/WEB-INF/web.xml api/metrics-api-jaxrs-1.1/src/main/webapp/WEB-INF/web.xml
25c25
<   <display-name>Hawkular Metrics Rest interface</display-name>
---
>   <display-name>Hawkular Metrics Rest interface - JAX-RS 1.1</display-name>
29c29
<     <param-value>org.hawkular.metrics.api.jaxrs.util.JacksonConfig</param-value>
---
>     <param-value>org.hawkular.metrics.api.jaxrs.util.JacksonContextResolver</param-value>
31a32,40
>   <filter>
>     <filter-name>CorsFilter</filter-name>
>     <filter-class>org.hawkular.metrics.api.jaxrs.filter.CorsFilter</filter-class>
>   </filter>
>   <filter-mapping>
>     <filter-name>CorsFilter</filter-name>
>     <url-pattern>/*</url-pattern>
>   </filter-mapping>
> 
34c43
<     <servlet-class>io.undertow.servlet.handlers.DefaultServlet</servlet-class>
---
>     <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
36,37c45,46
<       <param-name>resolve-against-context-root</param-name>
<       <param-value>true</param-value>
---
>       <param-name>listings</param-name>
>       <param-value>false</param-value>
44a54
> 
Only in api/metrics-api-jaxrs-1.1/src/main/webapp: favicon.ico
Only in api/metrics-api-jaxrs-1.1/src/main/webapp: hawkular_logo.png
Only in api/metrics-api-jaxrs-1.1/src/main/webapp: index.html
Only in api/metrics-api-jaxrs/src/main/webapp: static
Only in api/metrics-api-jaxrs-1.1/src/main/webapp: status.js
Only in api/metrics-api-jaxrs-1.1/src/main/webapp: welcome.css
Only in api/metrics-api-jaxrs/src/main: xsl
Only in api/metrics-api-jaxrs/src: test
